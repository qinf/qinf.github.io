[{"categories":["TIL"],"content":"Java 多版本管理 sdkman可安装多版本JAVA或者其他软件。sdkman.io jEVN是一个命令行工具让你免于设置JAVA_HOME配置。可以参考这篇文章Configuring jenv the right way # 添加配置到.zshrc，如果使用bash的话需要添加到.bash_profile里面 echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' \u003e\u003e ~/.zshrc echo 'eval \"$(jenv init -)\"' \u003e\u003e ~/.zshrc # 添加jdk，这里以Mac OSX为例 jenv add /Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home # 启用全局JAVA version jenv global ${JAVA_VERSION} # 设置SHELL指定的JAVA version jenv shell ${JAVA_VERSION} # 如果使用maven则还需要如下的配置 jenv enable-plugin maven jenv enable-plugin export # 如果不开启的话 $JAVA_HOME 可能为空 ","date":"2022-07-23","objectID":"/posts/java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-maven%E5%8D%95%E6%B5%8B/:1:0","tags":["Java","Maven"],"title":"Java多版本管理,Maven单测","uri":"/posts/java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-maven%E5%8D%95%E6%B5%8B/"},{"categories":["TIL"],"content":"Java 单测时出现 java.net.MalformedURLException: unknown protocol: socks5 异常 在跑Flink Kubernetes模块的单测时遇到此异常，完整异常栈 io.fabric8.kubernetes.client.KubernetesClientException: Invalid proxy server configuration at io.fabric8.kubernetes.client.utils.HttpClientUtils.createHttpClient(HttpClientUtils.java:158) at io.fabric8.kubernetes.client.utils.HttpClientUtils.createHttpClientForMockServer(HttpClientUtils.java:66) at io.fabric8.kubernetes.client.server.mock.KubernetesMockServer.createClient(KubernetesMockServer.java:86) at org.apache.flink.kubernetes.MixedKubernetesServer.before(MixedKubernetesServer.java:64) at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46) at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) at org.apache.flink.util.TestNameProvider$1.evaluate(TestNameProvider.java:45) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69) at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38) at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54) Caused by: java.net.MalformedURLException: unknown protocol: socks5 at java.net.URL.\u003cinit\u003e(URL.java:617) at java.net.URL.\u003cinit\u003e(URL.java:507) at java.net.URL.\u003cinit\u003e(URL.java:456) at io.fabric8.kubernetes.client.utils.HttpClientUtils.getProxyUrl(HttpClientUtils.java:221) at io.fabric8.kubernetes.client.utils.HttpClientUtils.createHttpClient(HttpClientUtils.java:144) ... 24 more 此异常是由于设置的代理导致的，可以参考Security Exception: MalformedURLException: unknown protocol: socket during opening JNLP file修改网络设置。但是只修改这里对于我的环境是没有生效的，因为在公司需要配置代理，设置了HTTPS_PROXY=socket5://127.0.0.1:port所以提示unknown protocol: socks5，需要在终端中执行unset HTTPS_PROXY，然后执行单测就可以了。 ","date":"2022-07-23","objectID":"/posts/java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-maven%E5%8D%95%E6%B5%8B/:2:0","tags":["Java","Maven"],"title":"Java多版本管理,Maven单测","uri":"/posts/java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-maven%E5%8D%95%E6%B5%8B/"},{"categories":["TIL"],"content":"Maven 单测使用 由于很少使用maven命令做测试，这次处理上面一个问题时候用到了，这里简单整理一下maven test相关的使用命令。 # 执行单个类的测试 maven test -Dtest=com.my.pkg.FarTest # 执行单个类的指定方法测试 maven test -Dtest=com.my.pkg.FarTest#testFunc # 跳过测试 maven clean package -DskipTests # 跳过测试及测试编译 mvn package -Dmaven.test.skip=true ","date":"2022-07-23","objectID":"/posts/java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-maven%E5%8D%95%E6%B5%8B/:3:0","tags":["Java","Maven"],"title":"Java多版本管理,Maven单测","uri":"/posts/java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-maven%E5%8D%95%E6%B5%8B/"},{"categories":["TIL"],"content":"启动自动挂载硬盘 # 查看磁盘分区 sudo fdisk -l # 挂载磁盘 sudo mount /dev/sdb /data/ # 查看磁盘挂载UUID sudo blkid /dev/sdb # 修改/etc/fstab文件 sudo vi /etc/fstab # 添加磁盘信息，[UUID=************] [挂载磁盘分区] [挂载磁盘格式] 0 2 # 第一数字0，0是开机不检查磁盘，1是开机检查磁盘 # 第二个数2，0表示交换分区，1表示启动分区，2表示普通分区 UUID=${UUID} /media/qinf/D ntfs defaults 0 2 ","date":"2022-05-09","objectID":"/posts/ubuntu%E5%90%AF%E5%8A%A8%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/:1:0","tags":["Ubuntu","Docker"],"title":"Ubuntu启动自动挂载硬盘","uri":"/posts/ubuntu%E5%90%AF%E5%8A%A8%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"},{"categories":["TIL"],"content":"Docker container 启动重启 docker run --restart=always -d --name ${container_name} -p ${port}:80 -v /localdir:/mount_dir ${image_name} ","date":"2022-05-09","objectID":"/posts/ubuntu%E5%90%AF%E5%8A%A8%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/:2:0","tags":["Ubuntu","Docker"],"title":"Ubuntu启动自动挂载硬盘","uri":"/posts/ubuntu%E5%90%AF%E5%8A%A8%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"},{"categories":["TIL"],"content":"ping使用的是ICMP协议，不支持代理。 可以执行curl -vv https://www.google.com看看有没有走代理。 ","date":"2022-05-06","objectID":"/posts/ping%E4%B8%8D%E8%B5%B0%E4%BB%A3%E7%90%86/:0:0","tags":["proxy"],"title":"Ping不走代理","uri":"/posts/ping%E4%B8%8D%E8%B5%B0%E4%BB%A3%E7%90%86/"}]